(defpackage hddl-json
  (:use common-lisp hddl-utils cl-json iterate)
  (:export json-dump-domain))

(in-package :hddl-json)

(defun json-dump-domain (domain)
  "Print a JSON representation ot DOMAIN to the JSON:*JSON-OUTPUT* stream."
  (with-object ()
    (encode-object-member '#:|$schema| "https://www.sift.net/hddl/draft/2023-07-28/domain")
    (encode-object-member 'name (string-downcase (symbol-name (domain-name domain))))
    (as-object-member (:types)
      (with-array ()
        (let ((alist
                (hddl-utils:typelist-to-alist (domain-types domain))))
          (iter (for (type . supertype) in alist)
            (as-array-member ()
              (with-object ()
                (encode-object-member :type type)
                (encode-object-member :supertype supertype)))))))
    (as-object-member (:requirements)
      (let ((*lisp-identifier-name-to-json* #'(lambda (i) (string-downcase i))))
        (encode-json (domain-requirements domain))))
    (as-object-member (:constants)
      (with-array ()
        (let ((alist
                (hddl-utils:typelist-to-alist (domain-constants domain))))
          (iter (for (constant . type) in alist)
            (as-array-member ()
              (with-object ()
                (encode-object-member :name constant)
                (encode-object-member :type type)))))))
    (as-object-member (:predicates)
      (with-array ()
        (iter (for pred-def in (domain-predicates domain))
          (as name = (predicate-name pred-def))
          (as params = (predicate-parameters pred-def))
          (as-array-member ()
            (with-object ()
              (encode-object-member :name name)
              (as-object-member (:parameters)
                (let ((alist (typelist-to-alist params)))
                  (with-array ()
                    (iter (for (param . type) in alist)
                      (as-array-member ()
                        (with-object ()
                          (encode-object-member :name param)
                          (encode-object-member :type type))))))))))))
    (as-object-member (:tasks)
      (with-array ()
        (iter (for pred-def in (domain-tasks domain))
          (as name = (task-name pred-def))
          (as params = (task-parameters pred-def))
          (as-array-member ()
            (with-object ()
              (encode-object-member :name name)
              (as-object-member (:parameters)
                (let ((alist (typelist-to-alist params)))
                  (with-array ()
                    (iter (for (param . type) in alist)
                      (as-array-member ()
                        (with-object ()
                          (encode-object-member :name param)
                          (encode-object-member :type type))))))))))))
    (values)))


