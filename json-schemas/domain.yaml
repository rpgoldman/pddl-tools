$schema: http://json-schema.org/draft-07/schema#
type: object
properties:
  $schema:
    type: string
    format: uri
    const: https://www.sift.net/hddl/draft/2023-07-31/domain
  name:
    type: string
  actions:
    type: array
    items:
      $ref: "#/$defs/action"
  constants:
    $ref: "#/$defs/typelist"
  methods:
    type: array
    items:
      $ref: "#/$defs/method"
  predicates:
    type: array
    items:
      - type: object
        properties:
          name:
            type: string
          parameters:
            $ref: "#/$defs/typelist"
        required:
          - name
          - parameters
  requirements:
    type: array
    items:
      - type: string
  tasks:
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        parameters:
          $ref: "#/$defs/typelist"
      required:
        - name
        - parameters
  types:
    type: array
    items:
      type: object
      properties:
        supertype:
          type: string
        type:
          type: string
      required:
        - type
$defs:
  effect:
    type: object
    oneOf:
      - null
      - $ref: "#/$defs/atomicTerm"
      - $ref: "#/$defs/negatedEffect"
      - $ref: "#/$defs/condEffect"
      - $ref: "#/$defs/quantifiedEffect"
      - $ref: "#/$defs/conjEffect"
  typelist:
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required: name
    title: Typed list
    description: >
      A list of objects, each of which associates a name with
      a type. Typing is optional in PDDL/HDDL, so the type
      property is optional.        
  conjEffect:
    type: object
    properties:
      op:
        type: string
        const: and
      effects:
        type: array
        items:
          $ref: "#/$defs/effect"
    required: [op, effect]
  negatedEffect:
    type: object
    properties:
      op:
        type: string
        const: not
      effect:
        type:
          $ref: "#/$defs/effect"
    required: [op, effect]
  condEffect:
    type: object
    properties:
      op:
        type: string
        const: when
      condition:
        $ref: "#/$defs/goal"
      effect:
        $ref: "#/$defs/effect"
    required: [op, condition, effect]
  quantifiedEffect:
    type: object
    properties:
      op:
        type: string
        oneOf:
          - const: forall
          - const: exists
      boundVars:
        $ref: "#/$defs/typelist"
      effect:
        $ref: "#/$defs/effect"
  atomicTerm:
    type: object
    properties:
      predicate:
        type: string
      args:
        type: array
        items:
          type: string
    required:
      - predicate
      - args
  goal:
    oneOf:
      - $ref: "#/$defs/atomicTerm"
      - null
      - $ref: "#/$defs/negatedGoal"
      - $ref: "#/$defs/naryOpGoal"
      - $ref: "#/$defs/binaryOpGoal"
      - $ref: "#/$defs/quantifiedGoal"
  negatedGoal:
    type: object
    properties:
      op:
        type: string
        const: not
      operand:
        $ref: "#/$defs/goal"
  binaryOpGoal:
    type: object
    properties:
      op:
        type: string
        enum:
          - imply
      operand1:
        $ref: "#/$defs/goal"
      operand2:
        $ref: "#/$defs/goal"
    required: [op, operand1, operand2]

  naryOpGoal:
    type: object
    properties:
      op:
        type: string
        enum:
          - and
          - or
      operands:
        type: array
        items:
          $ref: "#/$defs/goal"
    required:
      - op
      - operands

  quantifiedGoal:
    type: object
    properties:
      op:
        type: string
        enum:
          - forall
          - exists
      boundVars:
        $ref: "#/$defs/typelist"
      effect:
        $ref: "#/$defs/goal"
      required:
        - op
        - boundVars
        - effect

  action:
    type: object
    properties:
      effect:
        $ref: "#/$defs/effect"
      name:
        type: string
      parameters:
        $ref: "#/$defs/typelist"
      precondition:
        $ref: "#/$defs/goal"
    required:
      - effect
      - name
      - parameters
      - precondition



  task:
    type: object
    properties:
      args:
        type: array
        items:
          type: string
      taskName:
        type: string
    required:
      - args
      - taskName

  taskDef:
    type: object
    properties:
      args:
        $ref: "#/$defs/typelist"
      taskName:
        type: string
    required:
      - args
      - taskName

  method:
    type: object
    properties:
      name:
        type: string
      parameters:
       type: array
       items:
         $ref: "#/$defs/typelist"
      precondition:
        $ref: "#/$defs/goal"
      task:
        $ref: "#/$defs/task"
      taskNetwork:
        type:
          oneOf:
            - $ref: "#/$defs/orderedTaskNetwork"
    required:
      - name
      - parameters
      - precondition
      - task
      - taskNetwork

  orderedTaskNetwork:
    type: object
    properties:
      orderedSubtasks:
        type: array
        items:
          $ref: "#/$defs/task"
 


required:
  - $schema
  - actions
  - constants
  - methods
  - name
  - predicates
  - requirements
  - tasks
  - types
